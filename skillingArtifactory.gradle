apply plugin: 'maven-publish'

// Using extra variables instead of def so the values are usable in the project that applies the script
project.ext {
    baseRepositoryURL = "http://artifactory.skilling.com/artifactory"
    publicRepository = "$baseRepositoryURL/libs-release"
    releaseRepository = "$baseRepositoryURL/libs-release-local"
    snapshotRepository = "$baseRepositoryURL/libs-snapshot-local"
}

assert project.hasProperty('repositoryUser'): "repositoryUser not defined. Specify the property in ~/.gradle/gradle.properties"
assert project.hasProperty('repositoryPassword'): "repositoryPassword not defined. Specify the property in ~/.gradle/gradle.properties"

repositories {
    maven {
        name = "skillingArtifactory"
        url = project.publicRepository
        credentials {
            username = "${repositoryUser}"
            password = "${repositoryPassword}"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }

    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? project.snapshotRepository : project.releaseRepository
            credentials {
                username = "${repositoryUser}"
                password = "${repositoryPassword}"
            }
        }
    }
}
